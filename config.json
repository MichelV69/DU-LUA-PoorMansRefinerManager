{
  "slots": {
    "0": {
      "name": "slot1",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "1": {
      "name": "slot2",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "2": {
      "name": "slot3",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "3": {
      "name": "slot4",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "4": {
      "name": "slot5",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "5": {
      "name": "slot6",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "6": {
      "name": "slot7",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "7": {
      "name": "slot8",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "8": {
      "name": "slot9",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "9": {
      "name": "slot10",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "-1": {
      "name": "unit",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "-3": {
      "name": "player",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "-2": {
      "name": "construct",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "-4": {
      "name": "system",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "-5": {
      "name": "library",
      "type": {
        "events": [],
        "methods": []
      }
    }
  },
  "handlers": [
    {
      "code": "unit.setTimer(\"CheckStatus\",21)",
      "filter": {
        "args": [
          {
            "value": "6"
          }
        ],
        "signature": "onStatusChanged(status)",
        "slotKey": "0"
      },
      "key": "0"
    },
    {
      "code": "unit.setTimer(\"CheckStatus\",21)",
      "filter": {
        "args": [
          {
            "value": "3"
          }
        ],
        "signature": "onStatusChanged(status)",
        "slotKey": "0"
      },
      "key": "1"
    },
    {
      "code": "unit.setTimer(\"CheckStatus\",21)",
      "filter": {
        "args": [
          {
            "value": "1"
          }
        ],
        "signature": "onStatusChanged(status)",
        "slotKey": "0"
      },
      "key": "2"
    },
    {
      "code": "unit.setTimer(\"CheckStatus\",21)",
      "filter": {
        "args": [],
        "signature": "onBankUpdate()",
        "slotKey": "0"
      },
      "key": "3"
    },
    {
      "code": "unit.stopTimer(\"CheckStatus\")\n\nfor IndustryIndex = 1, #IndustryList do\n    switch_product(IndustryList[IndustryIndex])\nend\n\nunit.setTimer(\"CheckStatus\", cycleTimeSeconds)\n--- ### unit.OnTimer(1) EOF ### ---\n",
      "filter": {
        "args": [
          {
            "value": "CheckStatus"
          }
        ],
        "signature": "onTimer(tag)",
        "slotKey": "-1"
      },
      "key": "4"
    },
    {
      "code": "--- ### unit.onstart(1) ---\ndesiredOreLoadInStock = 1111 --export: Maintain how much of each?\ncycleTimeSeconds = 3.33     --export: Check connected industry how often?\nforceBottomStart = true     --export: when first booting, force all machines to start with OreList.T1.aluminum\n\nversion = \"1.2.6\"\nrev_date = \"26March2024\"\n\nfunction switch_product(industryID)\n    if industryID.getState() == IndustryStatus.running then\n        return\n    end\n\n    local stopImmediate                 = false\n    local stopDestructive               = false\n    local currentItem                   = industryID.getOutputs()\n\n    -- linked list to cycle possible recipes\n    local cycleList                     = {}\n\n    cycleList[OreList.T1.oxygen.pure]   = OreList.T1.aluminum.ore;\n    cycleList[OreList.T1.aluminum.ore]  = OreList.T1.carbon.ore;\n    cycleList[OreList.T1.carbon.ore]    = OreList.T1.iron.ore;\n    cycleList[OreList.T1.iron.ore]      = OreList.T1.silicon.ore;\n    cycleList[OreList.T1.silicon.ore]   = OreList.T1.hydrogen.pure;\n    cycleList[OreList.T1.hydrogen.pure] = OreList.T2.chromium.ore;\n\n    cycleList[OreList.T2.chromium.ore]  = OreList.T2.calcium.ore;\n    cycleList[OreList.T2.calcium.ore]   = OreList.T2.copper.ore;\n    cycleList[OreList.T2.copper.ore]    = OreList.T2.sodium.ore;\n    cycleList[OreList.T2.sodium.ore]    = OreList.T3.sulfur.ore;\n    \n    cycleList[OreList.T3.sulfur.ore]    = OreList.T3.lithium.ore;\n    \n    cycleList[OreList.T3.lithium.ore]    = OreList.Default;\n\n    if currentItem == nil then\n        currentItem = {}\n        currentItem[1] = {}\n    end\n\n    if not cycleList[currentItem[1].id] then\n        -- if the refiner was doing a batch of something else, fall back to T1\n        currentItem[1].id = OreList.Default\n    end\n\n    if forceBottomStart then\n        forceBottomStart = false\n        currentItem[1].id = OreList.T1.aluminum.ore\n    end\n\n    -- handle the refiner\n    industryID.stop(stopImmediate, stopDestructive)\n    industryID.setOutput(cycleList[currentItem[1].id])\n    industryID.startMaintain(desiredOreLoadInStock)\n\n    return\nend\n\n--- ### main code\n\nIndustryList = {}\nfor i = 1, 9, 1 do\n    if SlotList[i] and SlotList[i].getState() ~= nil then\n        table.insert(IndustryList, SlotList[i])\n        if forceBottomStart then \n            SlotList[i].stop(true)\n            end\n    end\nend\n\nunit.setTimer(\"CheckStatus\", 1)\n--- EOF unit.onstart(1) ---\n",
      "filter": {
        "args": [],
        "signature": "onStart()",
        "slotKey": "-1"
      },
      "key": "5"
    },
    {
      "code": "--- ### library.onstart(1) ---\n\nSlotList                 = { slot1, slot2, slot3, slot4, slot5, slot6, slot7, slot8, slot9, slot10 }\n\nOreList                  = {}\nOreList.T1               = {}\n\nOreList.T1.hydrogen      = {}\nOreList.T1.hydrogen.pure = 1010524904\nOreList.T1.oxygen        = {}\nOreList.T1.oxygen.pure   = 947806142\n\nOreList.T1.iron          = {}\nOreList.T1.iron.ore      = 4234772167\nOreList.T1.iron.pure     = 198782496\n\nOreList.T1.aluminum      = {}\nOreList.T1.aluminum.ore  = 262147665\nOreList.T1.aluminum.pure = 2240749601\n\nOreList.T1.carbon        = {}\nOreList.T1.carbon.ore    = 299255727\nOreList.T1.carbon.pure   = 159858782\n\nOreList.T1.silicon       = {}\nOreList.T1.silicon.ore   = 3724036288\nOreList.T1.silicon.pure  = 2589986891\n------\n\nOreList.T2               = {}\nOreList.T2.chromium      = {}\nOreList.T2.chromium.ore  = 2029139010\nOreList.T2.chromium.pure = 2147954574\n\nOreList.T2.copper        = {}\nOreList.T2.copper.ore    = 2289641763\nOreList.T2.copper.pure   = 1466453887\n\nOreList.T2.sodium        = {}\nOreList.T2.sodium.ore    = 343766315\nOreList.T2.sodium.pure   = 3603734543\n\nOreList.T2.calcium       = {}\nOreList.T2.calcium.ore   = 3086347393\nOreList.T2.calcium.pure  = 2112763718\n------\n\nOreList.T3               = {}\nOreList.T3.sulfur        = {}\nOreList.T3.sulfur.ore    = 4041459743 -- pyrite\nOreList.T3.sulfur.pure   = 3822811562\n\nOreList.T3.lithium        = {}\nOreList.T3.lithium.ore    = 3837858336 -- Petalite\nOreList.T3.lithium.pure   = 3810111622\n\n----\n\nOreList.Default          = OreList.T1.oxygen.pure\n----\n\nIndustryStatus           = {}\nIndustryStatus.running   = 2\nIndustryStatus.jammed    = 3\nIndustryStatus.pending   = 6\n--- EOF library.onstart(1) ---\n",
      "filter": {
        "args": [],
        "signature": "onStart()",
        "slotKey": "-5"
      },
      "key": "6"
    }
  ],
  "methods": [],
  "events": []
}